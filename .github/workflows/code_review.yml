name: Code Review Assistant

permissions:
  pull-requests: write
  issues: write

on:
  pull_request:
    branches:
      - main
    paths:
      - '**/*.py'

jobs:
  ai-code-quality:
    name: AI-Powered Code Quality
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Install Dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint flake8 radon bandit docformatter requests openai jq

      # Step 3: Static Analysis (Pylint)
      - name: Run Pylint for Code Quality
        run: |
          find . -name "*.py" | xargs pylint --output-format=json > pylint_output.json || true

      # Step 4: Code Style Analysis (Flake8)
      - name: Run Flake8 for Style Issues
        run: |
          flake8 . --format='%(path)s:%(row)d:%(col)d: %(code)s %(text)s' > flake8_output.txt || true

      # Step 5: Cyclomatic Complexity Check (Radon)
      - name: Check Cyclomatic Complexity
        run: |
          radon cc . -s -j > radon_output.json || true

      # Step 6: Security Analysis (Bandit)
      - name: Run Bandit for Security Issues
        run: |
          bandit -r . -f json -o bandit_output.json || true

      # Step 7: Documentation Check (Docformatter)
      - name: Check Documentation Consistency
        run: |
          docformatter --check --recursive . > docformatter_output.txt || true

      # Step 8: AI Analysis Script
            # Step 8: AI Analysis Script
      - name: Run AI-Powered Analysis
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "import openai" > ai_analysis.py
          echo "import glob" >> ai_analysis.py
          echo "import os" >> ai_analysis.py
          echo "import traceback" >> ai_analysis.py

          echo "openai.api_key = os.getenv('OPENAI_API_KEY')" >> ai_analysis.py
          echo "report = '## AI-Powered Code Quality Report\\n\\n'" >> ai_analysis.py

          echo "for file in glob.glob('**/*.py', recursive=True):" >> ai_analysis.py
          echo "    try:" >> ai_analysis.py
          echo "        with open(file, 'r') as f:" >> ai_analysis.py
          echo "            content = f.read()" >> ai_analysis.py
          echo "        print(f'Analyzing {file}...')" >> ai_analysis.py

          echo "        response = openai.ChatCompletion.create(" >> ai_analysis.py
          echo "            model='gpt-3.5-turbo'," >> ai_analysis.py
          echo "            messages=[" >> ai_analysis.py
          echo "                {'role': 'system', 'content': 'You are an expert Python code reviewer. Analyze the code for issues and provide actionable suggestions.'}," >> ai_analysis.py
          echo "                {'role': 'user', 'content': f'Code:\\n{content}'}" >> ai_analysis.py
          echo "            ]," >> ai_analysis.py
          echo "            max_tokens=500," >> ai_analysis.py
          echo "            temperature=0.5" >> ai_analysis.py
          echo "        )" >> ai_analysis.py

          echo "        suggestions = response['choices'][0]['message']['content']" >> ai_analysis.py
          echo "        report += f'### File: {file}\\n{suggestions}\\n\\n'" >> ai_analysis.py

          echo "    except Exception as e:" >> ai_analysis.py
          echo "        print(f'Error analyzing {file}: {traceback.format_exc()}')" >> ai_analysis.py
          echo "        report += f'### File: {file}\\nError: {str(e)}\\n\\n'" >> ai_analysis.py

          echo "with open('ai_feedback.md', 'w') as feedback_file:" >> ai_analysis.py
          echo "    feedback_file.write(report)" >> ai_analysis.py

          python ai_analysis.py

      # Step 9: Combine All Feedback into One Report
      - name: Combine Feedback Report
        run: |
          echo "## Code Review Feedback Report" > combined_feedback.md

          echo "### 1. Static Analysis (Pylint)" >> combined_feedback.md
          cat pylint_output.json | jq -r '.[] | "- **\(.path)**: \(.message) [\(.symbol)]"' >> combined_feedback.md || echo "No Pylint issues found." >> combined_feedback.md

          echo "### 2. Style Analysis (Flake8)" >> combined_feedback.md
          cat flake8_output.txt >> combined_feedback.md || echo "No Flake8 issues found." >> combined_feedback.md

          echo "### 3. Cyclomatic Complexity (Radon)" >> combined_feedback.md
          jq -r 'to_entries[] | "- **\(.key)**: \(.value[].name) (Complexity: \(.value[].complexity))"' radon_output.json >> combined_feedback.md || echo "No complexity issues found." >> combined_feedback.md

          echo "### 4. Security Analysis (Bandit)" >> combined_feedback.md
          jq -r '.results[] | "- **\(.filename)**: \(.issue_text) [Severity: \(.issue_severity)]"' bandit_output.json >> combined_feedback.md || echo "No security issues found." >> combined_feedback.md

          echo "### 5. Documentation Check (Docformatter)" >> combined_feedback.md
          cat docformatter_output.txt >> combined_feedback.md || echo "Documentation is clean." >> combined_feedback.md

          echo "### 6. AI-Powered Suggestions" >> combined_feedback.md
          cat ai_feedback.md >> combined_feedback.md || echo "No AI feedback generated." >> combined_feedback.md

      # Step 10: Upload Combined Report
      - name: Upload Feedback Report
        uses: actions/upload-artifact@v3
        with:
          name: combined-feedback
          path: combined_feedback.md

      # Step 11: Post Feedback to Pull Request
      - name: Comment on Pull Request
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = 'combined_feedback.md';
            if (fs.existsSync(path)) {
              const feedback = fs.readFileSync(path, 'utf8');
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: feedback
              });
            } else {
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: "Code analysis failed to generate a report. Please check the workflow logs for details."
              });
            }
