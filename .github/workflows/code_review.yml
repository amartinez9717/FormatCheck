name: Code Review Assistant

permissions:
  pull-requests: write
  issues: write

on:
  pull_request:
    branches:
      - main
    paths:
      - '**/*.py'

jobs:
  code-review:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint flake8 radon

      # Step 4: Run Static Analysis (Pylint)
      - name: Run Pylint Analysis
        run: |
          pylint **/*.py --output-format=json > pylint_output.json || true

      # Step 5: Run Static Analysis (Flake8)
      - name: Run Flake8 Analysis
        run: |
          flake8 **/*.py --format='%(path)s:%(row)d:%(col)d: %(code)s %(text)s' > flake8_output.txt || true

      # Step 6: Run Cyclomatic Complexity Analysis
      - name: Run Cyclomatic Complexity Analysis
        run: |
          radon cc **/*.py -s -j > radon_output.json || true

      # Step 7: Generate Feedback
      - name: Generate Feedback
        run: |
          python - <<EOF > feedback.md
          import json

          # Initialize feedback
          feedback = "## Code Review Feedback\\n"

          # Pylint feedback
          feedback += "\\n### 1. Static Analysis Feedback (Pylint)\\n"
          try:
              with open('pylint_output.json', 'r') as f:
                  pylint_issues = json.load(f)
                  if pylint_issues:
                      for issue in pylint_issues:
                          feedback += (
                              f"- **{issue['path']}** (Line {issue['line']}, Column {issue['column']}): "
                              f"{issue['message']} [{issue['symbol']}]\n"
                          )
                      feedback += "\n**Suggestions:**\n"
                      feedback += "- Address the reported issues by following PEP-8 and Python coding guidelines.\n"
                      feedback += "- Simplify complex functions or refactor where needed.\n"
                  else:
                      feedback += "No issues detected.\n"
          except Exception as e:
              feedback += f"Error processing Pylint results: {str(e)}\\n"

          # Flake8 feedback
          feedback += "\\n### 2. Static Analysis Feedback (Flake8)\\n"
          try:
              with open('flake8_output.txt', 'r') as f:
                  flake8_issues = f.readlines()
                  if flake8_issues:
                      for issue in flake8_issues:
                          feedback += f"- {issue.strip()}\\n"
                      feedback += "\n**Suggestions:**\n"
                      feedback += "- Fix unused imports, indentation errors, and other PEP-8 violations.\n"
                      feedback += "- Ensure consistent formatting and remove unnecessary whitespace.\n"
                  else:
                      feedback += "No issues detected.\n"
          except Exception as e:
              feedback += f"Error processing Flake8 results: {str(e)}\\n"

          # Radon feedback
          feedback += "\\n### 3. Cyclomatic Complexity Feedback\\n"
          try:
              with open('radon_output.json', 'r') as f:
                  radon_issues = json.load(f)
                  for file, issues in radon_issues.items():
                      for issue in issues:
                          feedback += (
                              f"- **{file}**: Function `{issue['name']}` at line {issue['lineno']} has complexity {issue['complexity']}.\n"
                          )
                      feedback += "\n**Suggestions:**\n"
                      feedback += "- Refactor functions or methods with high complexity into smaller, reusable units.\n"
                      feedback += "- Simplify nested loops or conditionals.\n"
          except Exception as e:
              feedback += f"Error processing Radon results: {str(e)}\\n"

          # Save feedback to file
          with open('feedback.md', 'w') as f:
              f.write(feedback)
          EOF

      # Step 8: Post Feedback as a Pull Request Comment
      - name: Post Feedback
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const feedback = fs.readFileSync('feedback.md', 'utf8');
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: feedback
            });
