name: Code Review Assistant

permissions:
  pull-requests: write
  issues: write

on:
  pull_request:
    branches:
      - main
    paths:
      - '**/*.py'

jobs:
  ai-code-quality:
    name: AI-Powered Code Quality
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Install Dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint flake8 radon docformatter requests jq

      # Step 3: Install Snyk CLI
      - name: Install Snyk CLI
        run: |
          npm install -g snyk

      # Step 4: Static Analysis (Pylint)
      - name: Run Pylint for Code Quality
        run: |
          find . -name "*.py" | xargs pylint --output-format=json > pylint_output.json || true

      # Step 5: Code Style Analysis (Flake8)
      - name: Run Flake8 for Style Issues
        run: |
          flake8 . --format='%(path)s:%(row)d:%(col)d: %(code)s %(text)s' > flake8_output.txt || true

      # Step 6: Cyclomatic Complexity Check (Radon)
      - name: Check Cyclomatic Complexity
        run: |
          radon cc . -s -j > radon_output.json || true

      # Step 7: Documentation Check (Docformatter)
      - name: Check Documentation Consistency
        run: |
          echo "Running docformatter..."
          TARGET_DIR="../src"  # Directory containing the Python files
          if find $TARGET_DIR -name "*.py" | grep -q "."; then
            docformatter --check --recursive $TARGET_DIR --verbose > docformatter_output.txt || true
            echo "Docformatter completed."
          else
            echo "No Python files found in $TARGET_DIR."
          fi
          if [ -s docformatter_output.txt ]; then
            echo "Docformatter found issues:"
            cat docformatter_output.txt
          else
            echo "Docformatter found no issues."
          fi

      # Step 8: DeepCode Analysis
      - name: Run DeepCode in Docker for Code Smells & Performance Issues
        run: |
          snyk code test --json > snyk_code_output.json || true

      # Step 9: Snyk Security Analysis
      - name: Run Snyk for Security Issues
        run: |
          snyk auth ${{ secrets.SNYK_TOKEN }}  # Authenticate using the SNYK_TOKEN secret
          snyk test > snyk_output.json || true

          # Handle empty or invalid output
          if [ ! -s snyk_output.json ]; then
            echo '{}' > snyk_output.json
          fi

      # Step 10: Combine All Feedback into One Report
      - name: Combine Feedback Report
        run: |
          echo "## Code Review Feedback Report" > combined_feedback.md

          # Pylint Feedback
          echo "### 1. Static Analysis (Pylint)" >> combined_feedback.md
          if [ -s pylint_output.json ]; then
            jq -r '.[] | "- **\(.path)**: \(.message) [\(.symbol)]" + "\n**Suggestion**: Consider fixing this by..."' pylint_output.json >> combined_feedback.md
          else
            echo "No Pylint issues found." >> combined_feedback.md
          fi

          # Flake8 Feedback
          echo "### 2. Style Analysis (Flake8)" >> combined_feedback.md
          if [ -s flake8_output.txt ]; then
            cat flake8_output.txt | while read line; do
              echo "$line" >> combined_feedback.md
              echo "**Suggestion**: Ensure consistent code style for readability." >> combined_feedback.md
            done
          else
            echo "No Flake8 issues found." >> combined_feedback.md
          fi

          # Radon Feedback
          echo "### 3. Cyclomatic Complexity (Radon)" >> combined_feedback.md
          if [ -s radon_output.json ]; then
            jq -r 'to_entries[] | "- **\(.key)**: \(.value[].name) (Complexity: \(.value[].complexity))" + "\n**Suggestion**: Refactor the code to reduce complexity."' radon_output.json >> combined_feedback.md
          else
            echo "No complexity issues found." >> combined_feedback.md
          fi

          # Docformatter Feedback
          echo "### 4. Documentation Check (Docformatter)" >> combined_feedback.md
          if [ -s docformatter_output.txt ]; then
            cat docformatter_output.txt | while read line; do
              echo "$line" >> combined_feedback.md
              echo "**Suggestion**: Review the documentation for consistency." >> combined_feedback.md
            done
          else
            echo "Documentation is clean." >> combined_feedback.md
          fi

          # DeepCode Feedback
          echo "### 5. DeepCode Analysis" >> combined_feedback.md
          if [ -s deepcode_output.json ]; then
            jq -r '.[] | "- **\(.file)**: \(.message) [\(.severity)]" + "\n**Suggestion**: Review the code for potential performance improvements."' snyk_code_output.json >> combined_feedback.md
          else
            echo "No DeepCode issues found." >> combined_feedback.md
          fi

          # Snyk Feedback
          echo "### 6. Snyk Security Analysis" >> combined_feedback.md
          if [ -s snyk_output.json ]; then
            # Use jq to handle missing fields gracefully
            jq -r '.issues? // [] | .[] | "- **\(.package)**: \(.title) [Severity: \(.severity)]" + "\n**Suggestion**: Consider upgrading to a more secure version of this package."' snyk_output.json >> combined_feedback.md || echo "Failed to parse Snyk output."
          else
            echo "No Snyk issues found or failed to process Snyk output." >> combined_feedback.md
          fi

      # Step 11: Upload Combined Report
      - name: Upload Feedback Report
        uses: actions/upload-artifact@v3
        with:
          name: combined-feedback
          path: combined_feedback.md

      # Step 12: Post Feedback to Pull Request
      - name: Comment on Pull Request
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = 'combined_feedback.md';
            if (fs.existsSync(path)) {
              const feedback = fs.readFileSync(path, 'utf8');
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: feedback
              });
            } else {
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: "Code analysis failed to generate a report. Please check the workflow logs for details."
              });
            }
