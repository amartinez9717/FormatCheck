name: Code Review Assistant

permissions:
  pull-requests: write
  issues: write

on:
  pull_request:
    branches:
      - main

jobs:
  code-review:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint flake8 radon

      # Step 4: Run Static Analysis
      - name: Run Static Analysis
        run: |
          pylint **/*.py > pylint_output.txt || true
          flake8 **/*.py > flake8_output.txt || true

      # Step 5: Run Cyclomatic Complexity Analysis
      - name: Run Cyclomatic Complexity Analysis
        run: |
          radon cc **/*.py -s -n C > radon_output.txt || true

      # Step 6: Run AST-based Code Smell Analysis
      - name: Run Code Smell Analysis
        run: |
          python - <<EOF > ast_analysis_output.txt
import ast
import os

def find_code_smells(file_path):
    feedback = []
    with open(file_path, 'r') as f:
        code = f.read()
    try:
        tree = ast.parse(code)
        for node in ast.walk(tree):
            if isinstance(node, ast.FunctionDef) and len(node.body) > 50:  # Large function
                feedback.append(f"Function '{node.name}' is too long ({len(node.body)} lines). Consider breaking it into smaller, modular functions.")
            if isinstance(node, ast.ClassDef) and len(node.body) > 100:  # Large class
                feedback.append(f"Class '{node.name}' is too large ({len(node.body)} methods). Consider refactoring into smaller classes.")
    except Exception as e:
        feedback.append(f"Error parsing {file_path}: {str(e)}")
    return feedback

feedback = []
for root, _, files in os.walk("."):
    for file in files:
        if file.endswith(".py"):
            feedback.extend(find_code_smells(os.path.join(root, file)))

if feedback:
    print("Code Smells Detected:")
    for line in feedback:
        print(line)
EOF

      # Step 7: Combine Feedback into a Single Comment
      - name: Combine Feedback
        run: |
          echo "## Code Review Feedback" > feedback.md
          
          echo "### 1. Static Analysis Feedback" >> feedback.md
          echo "\`\`\`plaintext" >> feedback.md
          cat pylint_output.txt >> feedback.md
          echo "\`\`\`" >> feedback.md
          echo "**Suggestions:**" >> feedback.md
          echo "- Fix the reported coding standard violations." >> feedback.md
          echo "- Add appropriate docstrings to modules, classes, and functions." >> feedback.md

          echo "\n### 2. Cyclomatic Complexity Feedback" >> feedback.md
          echo "\`\`\`plaintext" >> feedback.md
          cat radon_output.txt >> feedback.md
          echo "\`\`\`" >> feedback.md
          echo "**Suggestions:**" >> feedback.md
          echo "- Refactor methods or functions with high complexity." >> feedback.md
          echo "- Break down large methods into smaller, more manageable units." >> feedback.md

          echo "\n### 3. Code Smell Feedback" >> feedback.md
          echo "\`\`\`plaintext" >> feedback.md
          cat ast_analysis_output.txt >> feedback.md
          echo "\`\`\`" >> feedback.md
          echo "**Suggestions:**" >> feedback.md
          echo "- Split large functions into smaller, reusable ones." >> feedback.md
          echo "- Refactor large classes into multiple smaller classes where possible." >> feedback.md

      # Step 8: Post Feedback as a Pull Request Comment
      - name: Post Feedback
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const feedback = fs.readFileSync('feedback.md', 'utf8');
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: feedback
            });
