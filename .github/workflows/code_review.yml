name: Code Review Assistant

permissions:
  pull-requests: write
  issues: write

on:
  pull_request:
    branches:
      - main
    paths:
      - '**/*.py'

jobs:
  ai-code-quality:
    name: AI-Powered Code Quality
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Install Dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint flake8 radon bandit docformatter requests openai==1.14.3

      # Step 3: Static Analysis (Pylint)
      - name: Run Pylint for Code Quality
        run: |
          pylint **/*.py --output-format=json > pylint_output.json || true

      # Step 4: Code Style Analysis (Flake8)
      - name: Run Flake8 for Style Issues
        run: |
          flake8 **/*.py --format='%(path)s:%(row)d:%(col)d: %(code)s %(text)s' > flake8_output.txt || true

      # Step 5: Cyclomatic Complexity Check (Radon)
      - name: Check Cyclomatic Complexity
        run: |
          radon cc **/*.py -s -j > radon_output.json || true

      # Step 6: Security Analysis (Bandit)
      - name: Run Bandit for Security Issues
        run: |
          bandit -r . -f json -o bandit_output.json || true

      # Step 7: Documentation Check (Docformatter)
      - name: Check Documentation Consistency
        run: |
          docformatter --check --recursive . > docformatter_output.txt || true

      # Step 8: AI-Powered Analysis using OpenAI GPT
      - name: AI Analysis (OpenAI GPT)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python - <<EOF
import openai
import glob
import os

# Set API key
openai.api_key = os.getenv("OPENAI_API_KEY")
report = "## AI-Powered Code Quality Report\n\n"

# Analyze Python files
for file in glob.glob("**/*.py", recursive=True):
    with open(file, 'r') as f:
        content = f.read()

    print(f"Analyzing {file} with AI...")

    # Use ChatCompletion API with gpt-3.5-turbo (updated syntax for openai>=1.0.0)
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are an expert Python code reviewer. Analyze the code for security vulnerabilities, maintainability issues, and missing documentation, and provide actionable suggestions."},
                {"role": "user", "content": f"Code to review:\n\n{content}"}
            ],
            max_tokens=800,
            temperature=0.7
        )

        # Collect AI feedback
        suggestions = response.choices[0].message.content
        report += f"### File: {file}\n{suggestions}\n\n"

    except Exception as e:
        print(f"Error analyzing {file}: {e}")
        report += f"### File: {file}\nError analyzing the file: {str(e)}\n\n"

# Save the AI-generated report
with open("ai_feedback.md", "w") as feedback_file:
    feedback_file.write(report)
EOF

      # Step 9: Combine All Feedback into One Report
      - name: Combine Feedback Report
        run: |
          echo "## Code Review Feedback Report" > combined_feedback.md
          
          echo "### 1. Static Analysis (Pylint)" >> combined_feedback.md
          cat pylint_output.json | jq -r '.[] | "- **\(.path)** (Line \(.line), Column \(.column)): \(.message) [\(.symbol)]"' >> combined_feedback.md || echo "No Pylint issues found." >> combined_feedback.md
          
          echo "### 2. Style Analysis (Flake8)" >> combined_feedback.md
          cat flake8_output.txt >> combined_feedback.md || echo "No Flake8 issues found." >> combined_feedback.md
          
          echo "### 3. Cy
