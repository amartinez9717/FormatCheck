name: Code Review Assistant

permissions:
  pull-requests: write
  issues: write

on:
  pull_request:
    branches:
      - main
    paths:
      - '**/*.py'    

jobs:
  static-analysis:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Install dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint flake8 radon

      # Run Pylint
      - name: Run Pylint
        run: |
          pylint **/*.py > pylint_output.txt || true
        continue-on-error: true

      # Run Flake8
      - name: Run Flake8
        run: |
          flake8 **/*.py > flake8_output.txt || true
        continue-on-error: true

      # Run Cyclomatic Complexity Analysis
      - name: Run Radon
        run: |
          radon cc **/*.py -nc > radon_output.txt || true
        continue-on-error: true

      # Run AST-based custom analysis
      - name: Run Custom AST Analysis
        run: |
          python - <<EOF
          import ast
          import sys
          import os

          def analyze_code(file_path):
              with open(file_path, "r") as source_file:
                  tree = ast.parse(source_file.read())
              large_functions = []
              for node in ast.walk(tree):
                  if isinstance(node, ast.FunctionDef):
                      if len(node.body) > 20:
                          large_functions.append(node.name)
              return large_functions

          python_files = [
              os.path.join(root, f)
              for root, _, files in os.walk(".")
              for f in files
              if f.endswith(".py")
          ]
          for file in python_files:
              print(f"Analyzing: {file}")
              large_functions = analyze_code(file)
              if large_functions:
                  print(f"Large functions detected in {file}: {large_functions}")
          EOF

      # Combine and comment feedback
      - name: Generate Feedback
        run: |
          echo "### Static Analysis Feedback:" > feedback.md
          echo "\`\`\`plaintext" >> feedback.md
          cat pylint_output.txt >> feedback.md
          cat flake8_output.txt >> feedback.md
          echo "\`\`\`" >> feedback.md
          echo "" >> feedback.md
          echo "### Cyclomatic Complexity (Radon) Feedbac
