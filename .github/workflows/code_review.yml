name: Code Review Assistant

permissions:
  pull-requests: write
  issues: write

on:
  pull_request:
    branches:
      - main
    paths:
      - '**/*.py'

jobs:
  ai-code-quality:
    name: AI-Powered Code Quality
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Install Dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint flake8 radon bandit docformatter requests openai jq

      # Step 3: Static Analysis (Pylint)
      - name: Run Pylint for Code Quality
        run: |
          find . -name "*.py" | xargs pylint --output-format=json > pylint_output.json || true

      # Step 4: Code Style Analysis (Flake8)
      - name: Run Flake8 for Style Issues
        run: |
          flake8 . --format='%(path)s:%(row)d:%(col)d: %(code)s %(text)s' > flake8_output.txt || true

      # Step 5: Cyclomatic Complexity Check (Radon)
      - name: Check Cyclomatic Complexity
        run: |
          radon cc . -s -j > radon_output.json || true

      # Step 7: Documentation Check (Docformatter)
      - name: Check Documentation Consistency
        run: |
          docformatter --check --recursive . > docformatter_output.txt || true

      # Step 9: DeepCode Analysis via Docker
      - name: Run DeepCode in Docker for Code Smells & Performance Issues
        run: |
          docker run --rm -v $(pwd):/project deepcode/cli analyze /project --output json > deepcode_output.json || true

      # Step 10: Snyk Security Analysis
      - name: Run Snyk Security Analysis
        uses: snyk/actions/snyk-action@v1.850.0
        with:
          snyk_token: ${{ secrets.SNYK_TOKEN }}
          command: test
          args: '--all-projects --json'

      # Step 11: Combine All Feedback into One Report
      - name: Combine Feedback Report
        run: |
          echo "## Code Review Feedback Report" > combined_feedback.md

          echo "### 1. Static Analysis (Pylint)" >> combined_feedback.md
          cat pylint_output.json | jq -r '.[] | "- **\(.path)**: \(.message) [\(.symbol)]"' >> combined_feedback.md || echo "No Pylint issues found." >> combined_feedback.md

          echo "### 2. Style Analysis (Flake8)" >> combined_feedback.md
          cat flake8_output.txt >> combined_feedback.md || echo "No Flake8 issues found." >> combined_feedback.md

          echo "### 3. Cyclomatic Complexity (Radon)" >> combined_feedback.md
          jq -r 'to_entries[] | "- **\(.key)**: \(.value[].name) (Complexity: \(.value[].complexity))"' radon_output.json >> combined_feedback.md || echo "No complexity issues found." >> combined_feedback.md

          echo "### 5. Documentation Check (Docformatter)" >> combined_feedback.md
          cat docformatter_output.txt >> combined_feedback.md || echo "Documentation is clean." >> combined_feedback.md

          echo "### 7. DeepCode Analysis" >> combined_feedback.md
          jq -r '.[] | "- **\(.file)**: \(.message) [\(.severity)]"' deepcode_output.json >> combined_feedback.md || echo "No DeepCode issues found." >> combined_feedback.md

          echo "### 8. Snyk Security Analysis" >> combined_feedback.md
          jq -r '.issues[] | "- **\(.package)**: \(.title) [Severity: \(.severity)]"' snyk_output.json >> combined_feedback.md || echo "No Snyk issues found." >> combined_feedback.md

      # Step 12: Upload Combined Report
      - name: Upload Feedback Report
        uses: actions/upload-artifact@v3
        with:
          name: combined-feedback
          path: combined_feedback.md

      # Step 13: Post Feedback to Pull Request
      - name: Comment on Pull Request
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = 'combined_feedback.md';
            if (fs.existsSync(path)) {
              const feedback = fs.readFileSync(path, 'utf8');
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: feedback
              });
            } else {
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: "Code analysis failed to generate a report. Please check the workflow logs for details."
              });
            }
