name: Code Review Assistant

permissions:
  pull-requests: write
  issues: write

on:
  pull_request:
    branches:
      - main
    paths:
      - '**/*.py'

jobs:
  ai-code-quality:
    name: AI-Powered Code Quality
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Install Dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint flake8 radon bandit docformatter openai requests

      # Step 3: Static Analysis (Pylint)
      - name: Run Pylint for Code Quality
        run: |
          pylint **/*.py --output-format=json > pylint_output.json || true

      # Step 4: Code Style Analysis (Flake8)
      - name: Run Flake8 for Style Issues
        run: |
          flake8 **/*.py --format='%(path)s:%(row)d:%(col)d: %(code)s %(text)s' > flake8_output.txt || true

      # Step 5: Cyclomatic Complexity Check (Radon)
      - name: Check Cyclomatic Complexity
        run: |
          radon cc **/*.py -s -j > radon_output.json || true

      # Step 6: Security Analysis (Bandit)
      - name: Run Bandit for Security Issues
        run: |
          bandit -r . -f json -o bandit_output.json || true

      # Step 7: Documentation Check (Docformatter)
      - name: Check Documentation Consistency
        run: |
          docformatter --check --recursive . > docformatter_output.txt || true

      # Step 8: AI-Powered Analysis using OpenAI GPT (New API)
      - name: AI Analysis (OpenAI GPT)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python - <<EOF
          import openai
          import glob
          import os

          openai.api_key = os.getenv("OPENAI_API_KEY")
          report = "## AI-Powered Code Quality Report\n\n"

          # Analyze Python files
          for file in glob.glob("**/*.py", recursive=True):
              with open(file, 'r') as f:
                  content = f.read()

              print(f"Analyzing {file} with AI...")

              # Use ChatCompletion API (new API)
              response = openai.ChatCompletion.create(
                  model="gpt-4",  # Or "gpt-3.5-turbo"
                  messages=[
                      {"role": "system", "content": "You are an expert code reviewer. Analyze the code for security vulnerabilities, maintainability issues, and missing documentation. Provide actionable suggestions."},
                      {"role": "user", "content": f"Code to review:\n\n{content}"}
                  ],
                  max_tokens=800,
                  temperature=0.7
              )

              # Collect AI feedback
              suggestions = response['choices'][0]['message']['content']
              report += f"### File: {file}\n{suggestions}\n\n"

          # Save the AI-generated report
          with open("ai_feedback.md", "w") as feedback_file:
              feedback_file.write(report)
          EOF

      # Step 9: Combine All Feedback into One Report
      - name: Combine Feedback Report
        run: |
          echo "## Code Review Feedback Report" > combined_feedback.md
          
          echo "### 1. Static Analysis (Pylint)" >> combined_feedback.md
          cat pylint_output.json | jq -r '.[] | "- **\(.path)** (Line \(.line), Column \(.column)): \(.message) [\(.symbol)]"' >> combined_feedback.md || echo "No Pylint issues found." >> combined_feedback.md
          
          echo "### 2. Style Analysis (Flake8)" >> combined_feedback.md
          cat flake8_output.txt >> combined_feedback.md || echo "No Flake8 issues found." >> combined_feedback.md
          
          echo "### 3. Cyclomatic Complexity (Radon)" >> combined_feedback.md
          jq -r 'to_entries[] | "- **\(.key)**: Function \(.value[].name) at line \(.value[].lineno) has complexity \(.value[].complexity) (Grade: \(.value[].rank))"' radon_output.json >> combined_feedback.md || echo "No complexity issues found." >> combined_feedback.md
          
          echo "### 4. Security Analysis (Bandit)" >> combined_feedback.md
          cat bandit_output.json | jq -r '.results[] | "- **\(.filename)**: \(.issue_text) [Severity: \(.issue_severity)]"' >> combined_feedback.md || echo "No security issues found." >> combined_feedback.md
          
          echo "### 5. Documentation Check (Docformatter)" >> combined_feedback.md
          cat docformatter_output.txt >> combined_feedback.md || echo "Documentation formatting is clean." >> combined_feedback.md
          
          echo "### 6. AI-Powered Suggestions" >> combined_feedback.md
          cat ai_feedback.md >> combined_feedback.md

      # Step 10: Upload Combined Report
      - name: Upload Feedback Report
        uses: actions/upload-artifact@v3
        with:
          name: combined-feedback
          path: combined_feedback.md

      # Step 11: Post Feedback to Pull Request
      - name: Comment on Pull Request
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const feedback = fs.readFileSync('combined_feedback.md', 'utf8');
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: feedback
            });
